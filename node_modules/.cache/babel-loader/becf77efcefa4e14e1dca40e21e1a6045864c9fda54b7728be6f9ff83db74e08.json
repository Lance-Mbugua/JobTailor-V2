{"ast":null,"code":"// src/xai-provider.ts\nimport { NoSuchModelError } from \"@ai-sdk/provider\";\nimport { OpenAICompatibleChatLanguageModel, OpenAICompatibleImageModel } from \"@ai-sdk/openai-compatible\";\nimport { loadApiKey, withoutTrailingSlash } from \"@ai-sdk/provider-utils\";\n\n// src/xai-chat-settings.ts\nfunction supportsStructuredOutputs(modelId) {\n  return [\"grok-2-1212\", \"grok-2-vision-1212\"].includes(modelId);\n}\n\n// src/xai-error.ts\nimport { z } from \"zod\";\nvar xaiErrorSchema = z.object({\n  code: z.string(),\n  error: z.string()\n});\n\n// src/xai-provider.ts\nvar xaiErrorStructure = {\n  errorSchema: xaiErrorSchema,\n  errorToMessage: data => data.error\n};\nfunction createXai(options = {}) {\n  var _a;\n  const baseURL = withoutTrailingSlash((_a = options.baseURL) != null ? _a : \"https://api.x.ai/v1\");\n  const getHeaders = () => ({\n    Authorization: `Bearer ${loadApiKey({\n      apiKey: options.apiKey,\n      environmentVariableName: \"XAI_API_KEY\",\n      description: \"xAI API key\"\n    })}`,\n    ...options.headers\n  });\n  const createLanguageModel = (modelId, settings = {}) => {\n    const structuredOutputs = supportsStructuredOutputs(modelId);\n    return new OpenAICompatibleChatLanguageModel(modelId, settings, {\n      provider: \"xai.chat\",\n      url: ({\n        path\n      }) => `${baseURL}${path}`,\n      headers: getHeaders,\n      fetch: options.fetch,\n      defaultObjectGenerationMode: structuredOutputs ? \"json\" : \"tool\",\n      errorStructure: xaiErrorStructure,\n      supportsStructuredOutputs: structuredOutputs\n    });\n  };\n  const createImageModel = (modelId, settings = {}) => {\n    return new OpenAICompatibleImageModel(modelId, settings, {\n      provider: \"xai.image\",\n      url: ({\n        path\n      }) => `${baseURL}${path}`,\n      headers: getHeaders,\n      fetch: options.fetch,\n      errorStructure: xaiErrorStructure\n    });\n  };\n  const provider = (modelId, settings) => createLanguageModel(modelId, settings);\n  provider.languageModel = createLanguageModel;\n  provider.chat = createLanguageModel;\n  provider.textEmbeddingModel = modelId => {\n    throw new NoSuchModelError({\n      modelId,\n      modelType: \"textEmbeddingModel\"\n    });\n  };\n  provider.imageModel = createImageModel;\n  provider.image = createImageModel;\n  return provider;\n}\nvar xai = createXai();\nexport { createXai, xai };","map":{"version":3,"names":["NoSuchModelError","OpenAICompatibleChatLanguageModel","OpenAICompatibleImageModel","loadApiKey","withoutTrailingSlash","supportsStructuredOutputs","modelId","includes","z","xaiErrorSchema","object","code","string","error","xaiErrorStructure","errorSchema","errorToMessage","data","createXai","options","_a","baseURL","getHeaders","Authorization","apiKey","environmentVariableName","description","headers","createLanguageModel","settings","structuredOutputs","provider","url","path","fetch","defaultObjectGenerationMode","errorStructure","createImageModel","languageModel","chat","textEmbeddingModel","modelType","imageModel","image","xai"],"sources":["C:\\Users\\owner\\JobTailor V2\\frontend\\node_modules\\@ai-sdk\\xai\\src\\xai-provider.ts","C:\\Users\\owner\\JobTailor V2\\frontend\\node_modules\\@ai-sdk\\xai\\src\\xai-chat-settings.ts","C:\\Users\\owner\\JobTailor V2\\frontend\\node_modules\\@ai-sdk\\xai\\src\\xai-error.ts"],"sourcesContent":["import {\n  ImageModelV1,\n  LanguageModelV1,\n  NoSuchModelError,\n  ProviderV1,\n} from '@ai-sdk/provider';\nimport {\n  OpenAICompatibleChatLanguageModel,\n  OpenAICompatibleImageModel,\n  ProviderErrorStructure,\n} from '@ai-sdk/openai-compatible';\nimport {\n  FetchFunction,\n  loadApiKey,\n  withoutTrailingSlash,\n} from '@ai-sdk/provider-utils';\nimport {\n  XaiChatModelId,\n  XaiChatSettings,\n  supportsStructuredOutputs,\n} from './xai-chat-settings';\nimport { XaiImageSettings } from './xai-image-settings';\nimport { XaiImageModelId } from './xai-image-settings';\nimport { XaiErrorData, xaiErrorSchema } from './xai-error';\n\nconst xaiErrorStructure: ProviderErrorStructure<XaiErrorData> = {\n  errorSchema: xaiErrorSchema,\n  errorToMessage: data => data.error,\n};\n\nexport interface XaiProvider extends ProviderV1 {\n  /**\nCreates an Xai chat model for text generation.\n   */\n  (modelId: XaiChatModelId, settings?: XaiChatSettings): LanguageModelV1;\n\n  /**\nCreates an Xai language model for text generation.\n   */\n  languageModel(\n    modelId: XaiChatModelId,\n    settings?: XaiChatSettings,\n  ): LanguageModelV1;\n\n  /**\nCreates an Xai chat model for text generation.\n   */\n  chat: (\n    modelId: XaiChatModelId,\n    settings?: XaiChatSettings,\n  ) => LanguageModelV1;\n\n  /**\nCreates an Xai image model for image generation.\n   */\n  image(modelId: XaiImageModelId, settings?: XaiImageSettings): ImageModelV1;\n\n  /**\nCreates an Xai image model for image generation.\n   */\n  imageModel(\n    modelId: XaiImageModelId,\n    settings?: XaiImageSettings,\n  ): ImageModelV1;\n}\n\nexport interface XaiProviderSettings {\n  /**\nBase URL for the xAI API calls.\n     */\n  baseURL?: string;\n\n  /**\nAPI key for authenticating requests.\n   */\n  apiKey?: string;\n\n  /**\nCustom headers to include in the requests.\n   */\n  headers?: Record<string, string>;\n\n  /**\nCustom fetch implementation. You can use it as a middleware to intercept requests,\nor to provide a custom fetch implementation for e.g. testing.\n  */\n  fetch?: FetchFunction;\n}\n\nexport function createXai(options: XaiProviderSettings = {}): XaiProvider {\n  const baseURL = withoutTrailingSlash(\n    options.baseURL ?? 'https://api.x.ai/v1',\n  );\n  const getHeaders = () => ({\n    Authorization: `Bearer ${loadApiKey({\n      apiKey: options.apiKey,\n      environmentVariableName: 'XAI_API_KEY',\n      description: 'xAI API key',\n    })}`,\n    ...options.headers,\n  });\n\n  const createLanguageModel = (\n    modelId: XaiChatModelId,\n    settings: XaiChatSettings = {},\n  ) => {\n    const structuredOutputs = supportsStructuredOutputs(modelId);\n    return new OpenAICompatibleChatLanguageModel(modelId, settings, {\n      provider: 'xai.chat',\n      url: ({ path }) => `${baseURL}${path}`,\n      headers: getHeaders,\n      fetch: options.fetch,\n      defaultObjectGenerationMode: structuredOutputs ? 'json' : 'tool',\n      errorStructure: xaiErrorStructure,\n      supportsStructuredOutputs: structuredOutputs,\n    });\n  };\n\n  const createImageModel = (\n    modelId: XaiImageModelId,\n    settings: XaiImageSettings = {},\n  ) => {\n    return new OpenAICompatibleImageModel(modelId, settings, {\n      provider: 'xai.image',\n      url: ({ path }) => `${baseURL}${path}`,\n      headers: getHeaders,\n      fetch: options.fetch,\n      errorStructure: xaiErrorStructure,\n    });\n  };\n\n  const provider = (modelId: XaiChatModelId, settings?: XaiChatSettings) =>\n    createLanguageModel(modelId, settings);\n\n  provider.languageModel = createLanguageModel;\n  provider.chat = createLanguageModel;\n  provider.textEmbeddingModel = (modelId: string) => {\n    throw new NoSuchModelError({ modelId, modelType: 'textEmbeddingModel' });\n  };\n  provider.imageModel = createImageModel;\n  provider.image = createImageModel;\n\n  return provider;\n}\n\nexport const xai = createXai();\n","import { OpenAICompatibleChatSettings } from '@ai-sdk/openai-compatible';\n\n// https://console.x.ai and see \"View models\"\nexport type XaiChatModelId =\n  | 'grok-2-1212'\n  | 'grok-2-vision-1212'\n  | 'grok-beta'\n  | 'grok-vision-beta'\n  | (string & {});\n\nexport interface XaiChatSettings extends OpenAICompatibleChatSettings {}\n\nexport function supportsStructuredOutputs(modelId: XaiChatModelId) {\n  return ['grok-2-1212', 'grok-2-vision-1212'].includes(modelId);\n}\n","import { z } from 'zod';\n\n// Add error schema and structure\nexport const xaiErrorSchema = z.object({\n  code: z.string(),\n  error: z.string(),\n});\n\nexport type XaiErrorData = z.infer<typeof xaiErrorSchema>;\n"],"mappings":";AAAA,SAGEA,gBAAA,QAEK;AACP,SACEC,iCAAA,EACAC,0BAAA,QAEK;AACP,SAEEC,UAAA,EACAC,oBAAA,QACK;;;ACHA,SAASC,0BAA0BC,OAAA,EAAyB;EACjE,OAAO,CAAC,eAAe,oBAAoB,EAAEC,QAAA,CAASD,OAAO;AAC/D;;;ACdA,SAASE,CAAA,QAAS;AAGX,IAAMC,cAAA,GAAiBD,CAAA,CAAEE,MAAA,CAAO;EACrCC,IAAA,EAAMH,CAAA,CAAEI,MAAA,CAAO;EACfC,KAAA,EAAOL,CAAA,CAAEI,MAAA,CAAO;AAClB,CAAC;;;AFmBD,IAAME,iBAAA,GAA0D;EAC9DC,WAAA,EAAaN,cAAA;EACbO,cAAA,EAAgBC,IAAA,IAAQA,IAAA,CAAKJ;AAC/B;AA6DO,SAASK,UAAUC,OAAA,GAA+B,CAAC,GAAgB;EAzF1E,IAAAC,EAAA;EA0FE,MAAMC,OAAA,GAAUjB,oBAAA,EACdgB,EAAA,GAAAD,OAAA,CAAQE,OAAA,KAAR,OAAAD,EAAA,GAAmB,qBACrB;EACA,MAAME,UAAA,GAAaA,CAAA,MAAO;IACxBC,aAAA,EAAe,UAAUpB,UAAA,CAAW;MAClCqB,MAAA,EAAQL,OAAA,CAAQK,MAAA;MAChBC,uBAAA,EAAyB;MACzBC,WAAA,EAAa;IACf,CAAC,CAAC;IACF,GAAGP,OAAA,CAAQQ;EACb;EAEA,MAAMC,mBAAA,GAAsBA,CAC1BtB,OAAA,EACAuB,QAAA,GAA4B,CAAC,MAC1B;IACH,MAAMC,iBAAA,GAAoBzB,yBAAA,CAA0BC,OAAO;IAC3D,OAAO,IAAIL,iCAAA,CAAkCK,OAAA,EAASuB,QAAA,EAAU;MAC9DE,QAAA,EAAU;MACVC,GAAA,EAAKA,CAAC;QAAEC;MAAK,MAAM,GAAGZ,OAAO,GAAGY,IAAI;MACpCN,OAAA,EAASL,UAAA;MACTY,KAAA,EAAOf,OAAA,CAAQe,KAAA;MACfC,2BAAA,EAA6BL,iBAAA,GAAoB,SAAS;MAC1DM,cAAA,EAAgBtB,iBAAA;MAChBT,yBAAA,EAA2ByB;IAC7B,CAAC;EACH;EAEA,MAAMO,gBAAA,GAAmBA,CACvB/B,OAAA,EACAuB,QAAA,GAA6B,CAAC,MAC3B;IACH,OAAO,IAAI3B,0BAAA,CAA2BI,OAAA,EAASuB,QAAA,EAAU;MACvDE,QAAA,EAAU;MACVC,GAAA,EAAKA,CAAC;QAAEC;MAAK,MAAM,GAAGZ,OAAO,GAAGY,IAAI;MACpCN,OAAA,EAASL,UAAA;MACTY,KAAA,EAAOf,OAAA,CAAQe,KAAA;MACfE,cAAA,EAAgBtB;IAClB,CAAC;EACH;EAEA,MAAMiB,QAAA,GAAWA,CAACzB,OAAA,EAAyBuB,QAAA,KACzCD,mBAAA,CAAoBtB,OAAA,EAASuB,QAAQ;EAEvCE,QAAA,CAASO,aAAA,GAAgBV,mBAAA;EACzBG,QAAA,CAASQ,IAAA,GAAOX,mBAAA;EAChBG,QAAA,CAASS,kBAAA,GAAsBlC,OAAA,IAAoB;IACjD,MAAM,IAAIN,gBAAA,CAAiB;MAAEM,OAAA;MAASmC,SAAA,EAAW;IAAqB,CAAC;EACzE;EACAV,QAAA,CAASW,UAAA,GAAaL,gBAAA;EACtBN,QAAA,CAASY,KAAA,GAAQN,gBAAA;EAEjB,OAAON,QAAA;AACT;AAEO,IAAMa,GAAA,GAAM1B,SAAA,CAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}